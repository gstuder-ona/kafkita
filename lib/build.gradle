import java.time.Instant
import java.time.ZoneId
import java.time.format.DateTimeFormatter

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'com.github.sherter.google-java-format' version '0.8'
    id "com.adarshr.test-logger" version "2.0.0"
    id 'com.palantir.git-version' version "0.12.3"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

compileJava {
    // DRAGONS: This is *required* for Beam serialization to work - otherwise
    // Java compiles strip out parameter names and codegen fails to work.{
    // Helpful to keep generic parameter names around
    options.compilerArgs << '-parameters'
}

configurations {
    // Custom dependency categories here
    shadowRuntime
}

dependencies {

    testCompile 'junit:junit:4.13'

    compile 'org.apache.commons:commons-text:1.9'
    compile 'commons-io:commons-io:2.8.0'
    compile 'commons-codec:commons-codec:1.15'
    compile 'org.apache.zookeeper:zookeeper:3.5.8'
    compile 'org.apache.kafka:kafka_2.13:2.5.1'
}

shadowJar {
    archiveFileName = "${rootProject.name}-all.jar"
    from sourceSets.main.output
    configurations = [ project.configurations.compile, project.configurations.shadowRuntime ]
    zip64 true
    manifest {
        attributes 'Main-Class': "kafkito.Kafkito"
        attributes 'Specification-Title': "${rootProject.name}" + (rootProject.hasProperty('versionTitle') ? " " + rootProject.versionTitle : "")
        attributes 'Specification-Version': "${rootProject.version}"
        attributes 'Implementation-Title': "${versionDetails().branchName}@${gitVersion()} " + (rootProject.getProperties()['builderName'])
        attributes 'Implementation-Version': DateTimeFormatter.ofPattern("yyyyMMdd'T'HHmmss'Z'").withZone(ZoneId.of("UTC")).format(Instant.now())
    }
    mergeServiceFiles()
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
}