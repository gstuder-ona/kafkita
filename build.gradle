import java.time.Instant
import java.time.ZoneId
import java.time.format.DateTimeFormatter

plugins {
    id 'java'
    id 'application'
    id 'maven'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'com.github.sherter.google-java-format' version '0.8'
    id "com.adarshr.test-logger" version "2.0.0"
    id 'com.palantir.git-version' version "0.12.3"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

if (project.builderName.isEmpty())
    project.builderName = InetAddress.getLocalHost().getCanonicalHostName()

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

compileJava {
    // DRAGONS: This is *required* for Beam serialization to work - otherwise
    // Java compiles strip out parameter names and codegen fails to work.{
    // Helpful to keep generic parameter names around
    options.compilerArgs << '-parameters'
}

// Make sure we format before building
build.dependsOn(tasks.googleJavaFormat)
verifyGoogleJavaFormat.mustRunAfter(tasks.googleJavaFormat)

configurations {
    // Custom dependency categories here
    shadowRuntime
}

dependencies {

    compile 'org.slf4j:slf4j-api:1.7.30'
    compile 'org.apache.commons:commons-text:1.9'
    compile 'commons-io:commons-io:2.8.0'
    compile 'commons-codec:commons-codec:1.15'
    compile 'de.flapdoodle.embed:de.flapdoodle.embed.process:3.0.1'
    compile 'org.apache.zookeeper:zookeeper:3.5.8'
    compile 'org.apache.kafka:kafka_2.13:2.5.1'

    testCompile 'junit:junit:4.13'

    runtime "org.slf4j:slf4j-log4j12:1.7.30"
    runtime "log4j:log4j:1.2.17"
    runtime "log4j:apache-log4j-extras:1.2.17"
}

archivesBaseName = 'kafkita'
mainClassName = 'kafkita.Kafkita'

shadowJar {
    from sourceSets.main.output
    configurations = [ project.configurations.compile, project.configurations.runtime, project.configurations.shadowRuntime ]
    zip64 true
    manifest {
        attributes 'Specification-Title': "${project.name}" + (!project.versionTitle.isEmpty() ? " " + project.versionTitle : "")
        attributes 'Specification-Version': "${project.version}"
        attributes 'Implementation-Title': "${versionDetails().branchName}@${gitVersion()} " + project.builderName
        attributes 'Implementation-Version': DateTimeFormatter.ofPattern("yyyyMMdd'T'HHmmss'Z'").withZone(ZoneId.of("UTC")).format(Instant.now())
    }
    mergeServiceFiles()
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
}